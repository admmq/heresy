* EXWM

Here I define a hook, so exwm can switch monitors when I connect my laptop. I definately should rewrite it.
#+BEGIN_SRC emacs-lisp
  (defun exwm-change-screen-hook (external-monitor)
    (let ((xrandr-output-regexp "\n\\([^ ]+\\) connected ")
          default-output)
      (with-temp-buffer
        (call-process "xrandr" nil t nil)
        (goto-char (point-min))
        (re-search-forward xrandr-output-regexp nil 'noerror)
        (setq default-output (match-string 1))
        (forward-line)
        (if (not (re-search-forward xrandr-output-regexp nil 'noerror))
            (call-process "xrandr" nil nil nil "--output" default-output "--auto"
                          "--output" external-monitor "--off")
          (call-process
           "xrandr" nil nil nil
           "--output" (match-string 1) "--primary" "--auto"
           "--output" default-output "--off")
          (setq exwm-randr-workspace-monitor-plist (list 0 (match-string 1)))))))
#+END_SRC

Here I set some variable I want to use with exwm. Like displaying time
and battery.Also it's recommended to enable icomplete-vertical-mode. Still don't
know why but I took it from the [[https://github.com/emacs-exwm/exwm/wiki/Configuration-Example][exwm configuration example]]
#+BEGIN_SRC emacs-lisp
  (defun brigtnessDown ()
    (interactive)
    (shell-command "brightnessctl set 10%-"))
  (defun brigtnessUp ()
    (interactive)
    (shell-command "brightnessctl set +10%"))

  (defun stuff-exwm-set-variables ()
    ;; Turn on `display-time-mode' if you don't use an external bar.
    (setq display-time-default-load-average nil)
    (display-time-mode t)
    (display-battery-mode)

    ;; You are strongly encouraged to enable something like `icomplete-vertical-mode' to alter
    ;; the default behavior of 'C-x b', or you will take great pains to switch
    ;; to or back from a floating frame (remember 'C-x 5 o' if you refuse this
    ;; proposal however).
    (icomplete-vertical-mode 1)

    (global-set-key (kbd "<XF86MonBrightnessDown>") 'brigtnessDown)
    (global-set-key (kbd "<XF86MonBrightnessUp>") 'brigtnessUp)

    ;; Emacs server is not required to run EXWM but it has some interesting uses
    ;; (see next section).
    (server-start))
#+END_SRC

All of these also were taken from the [[https://github.com/emacs-exwm/exwm/wiki/Configuration-Example][exwm configuration example]]
#+BEGIN_SRC emacs-lisp
  (defun stuff-exwm-config ()
    (require 'exwm)

    ;; Set the initial number of workspaces (they can also be created later).
    (setq exwm-workspace-number 4)

    ;; All buffers created in EXWM mode are named "*EXWM*". You may want to
    ;; change it in `exwm-update-class-hook' and `exwm-update-title-hook', which
    ;; are run when a new X window class name or title is available.  Here's
    ;; some advice on this topic:
    ;; + Always use `exwm-workspace-rename-buffer` to avoid naming conflict.
    ;; + For applications with multiple windows (e.g. GIMP), the class names of
                                          ;    all windows are probably the same.  Using window titles for them makes
    ;;   more sense.
    ;; In the following example, we use class names for all windows except for
    ;; Java applications and GIMP.
    (add-hook 'exwm-update-class-hook
              (lambda ()
                (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                            (string= "gimp" exwm-instance-name))
                  (exwm-workspace-rename-buffer exwm-class-name))))
    (add-hook 'exwm-update-title-hook
              (lambda ()
                (when (or (not exwm-instance-name)
                          (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                          (string= "gimp" exwm-instance-name))
                  (exwm-workspace-rename-buffer exwm-title))))

    ;; Global keybindings can be defined with `exwm-input-global-keys'.
    ;; Here are a few examples:
    (setq exwm-input-global-keys
          `(
            ;; Bind "s-r" to exit char-mode and fullscreen mode.
            ([?\s-r] . exwm-reset)
            ;; Bind "s-w" to switch workspace interactively.
            ([?\s-w] . exwm-workspace-switch)
            ;; Bind "s-0" to "s-9" to switch to a workspace by its index.
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))
            ;; Bind "s-&" to launch applications ('M-&' also works if the output
            ;; buffer does not bother you).
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))
            ;; Bind "s-<f2>" to "slock", a simple X display locker.
            ([s-f2] . (lambda ()
                        (interactive)
                        (start-process "" nil "/usr/bin/slock")))))

    ;; To add a key binding only available in line-mode, simply define it in
    ;; `exwm-mode-map'.  The following example shortens 'C-c q' to 'C-q'.
    (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

    ;; The following example demonstrates how to use simulation keys to mimic
    ;; the behavior of Emacs.  The value of `exwm-input-simulation-keys` is a
    ;; list of cons cells (SRC . DEST), where SRC is the key sequence you press
    ;; and DEST is what EXWM actually sends to application.  Note that both SRC
    ;; and DEST should be key sequences (vector or string).
    (setq exwm-input-simulation-keys
          '(
            ;; movement
            ([?\C-b] . [left])
            ([?\M-b] . [C-left])
            ([?\C-f] . [right])
            ([?\M-f] . [C-right])
            ([?\C-p] . [up])
            ([?\C-n] . [down])
            ([?\C-a] . [home])
            ([?\C-e] . [end])
            ([?\M-v] . [prior])
            ([?\C-v] . [next])
            ([?\C-d] . [delete])
            ([?\C-k] . [S-end delete])
            ;; cut/paste.
            ([?\C-w] . [?\C-x])
            ([?\M-w] . [?\C-c])
            ([?\C-y] . [?\C-v])
            ;; search
            ([?\C-s] . [?\C-f])))

    (setq exwm-randr-workspace-monitor-plist '(0 "eDP-1"))
    (add-hook 'exwm-randr-screen-change-hook
              (lambda ()
                (exwm-change-screen-hook "HDMI-1")))
    (exwm-randr-mode 1)

    ;; You can hide the minibuffer and echo area when they're not used, by
    ;; uncommenting the following line.
                                          ;(setq exwm-workspace-minibuffer-position 'bottom)

    ;; Do not forget to enable EXWM. It will start by itself when things are
    ;; ready.  You can put it _anywhere_ in your configuration.
    (exwm-enable))
#+END_SRC
I probably shoud change it one day...

#+BEGIN_SRC emacs-lisp
  (provide 'stuff/exwm)
#+END_SRC
